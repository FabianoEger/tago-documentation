
.. _ref_analysis_analysis:

########
Analysis
########

The **analysis** is a powerful feature at Tago that experts and software developers can use to implement scripts to analyze and manipulate the data sent by the devices in real time.

Analysis is programmed using Javascript language with Tago methods. Here, you have access to all data inside your buckets, your devices, and some services provided by Tago.  We also provide some  libraries like lodash and async to optimize your code.

If you combine Analysis with Actions you can execute that script whenever a predefined variable with value arrives at Tago.
For example, you can process your information, as convert, transform, apply functions for that value. Also you can add new values in another bucket, get data from there or program actions such as send email, sms, etc...

We have a github repository with some examples, check it out at: https://github.com/tago-io/tago-analysis-examples

*******************
Setting Up Analysis
*******************
Create your own analysis is very easy. First, you need to click on Add Analysis in the upper left of the analysis main screen. Just write a name and a description, and you're ready to go!

.. image:: _static/analysis/analysis_new.png

.. _analysis_general_information:

General Information
********************
When you get inside your analysis, you will come across some configurations that will help you to personalize your analysis. In the General Information area, you should define the *time interval* that your analysis will run continuously, and the *environment variables* that are essential to a successful modular script.

.. image:: _static/analysis/analysis_general.png

| 1. **Name**: set the analysis name
| 2. **Time interval to run this script**: set the time period that your script will automatically run. If you want your script to be initiated by an event, select "never" and you can configure the :ref:`action <ref_actions_run_analysis>` to do it
| 3. **Description**: set the analysis description
| 4. **More**: Will show "more about this script" table
|   4-1. **ID**: the ID of this script. Note: Origin will automatically use this ID when none is declared
|   4-2. **Registered at**: date when your analysis was created
|   4-3. **Last runn**: last time the analysis was triggered
|   4-4. **Last update**: last time the analysis was modified
| 5. **New Environment variable**: will add an environment variable. No need to delete, just leave blank if you don't need to use it
|  5-1. **Name**: the variable name. You can refer to a environment variable by ##name## inside your analysis
|  5-2. **Value**: the value of the variable. It can be *integer* or *string*
|

Script editor
******************
Tago Script is the area where you write and edit your code that will be processed by the Analysis.

.. image:: _static/analysis/analysis_script.png

| 1. **Script Area**: is where your script should be placed when running locally (default)
| 2. **URL**: is where your script should be placed when running remotely. Note: You can host your script outside of Tago, just add the url here
| 3. **Save and Run**: You can "Save" or "Save and Run". The last option will immediately run your script after saving any change
|

Console
*******
Use the console to monitor the variables and status of your script. You can see any error or word generated by "console.log". It is also a very good debug tool.

.. image:: _static/analysis/analysis_console.png

| 1. **Run**: will immediately run your script. If you make any change in your script, make sure you save it before running it
| 2. **Console Screen**: Any error or response to a "console.log" will be show up here
| 3. **Clear Console**: clear everything that are showed in your console screen
| 4. **Auto-Clear**: clear the console every time the script runs
|

*******************
Internal Functions
*******************
Our Analysis have a several functions to help you to manipulate data in the buckets and the devices. You can also use services to send sms, e-mails, and get information from your account. It is possible to configure and setup almost everything in Tago through the analysis.

lodash
******
You can call lodash (**_**) as a native function in the analysis, no need to set it up. Lodash is a powerful library to manipulate data and compare values, you can read more about how to use *lodash* in the follow documentation: https://lodash.com/docs

| **Examples**

.. code-block:: javascript

  var my_array = [1,2,3];
  _.forEach(my_array, function(x){
      console.log(x);
  });

  //-> it will return 1, 2, 3 in each line respectively.

moment.js
*********
You can call moment.js (**moment_tz**) as a native function in the analysis, no need to set it up. With moment.js you can do more complex calculations about time and date in your analysis. You can read more about how to use *moment.js* in the follow documentation: http://momentjs.com/docs/

| **Examples**

.. code-block:: javascript

  moment_tz("12-25-1995", "MM-DD-YYYY");
  //-> It will return a date object

async
*****
You can call async as a native function in the analysis, no need to set it up. This library helps you to organize your functions so you can get the performance that you need. You can read more about how to use *async* in the follow documentation: https://github.com/caolan/async

| **Examples**

.. code-block:: javascript

  async.parallel([functions(...)], function(error, result){
      console.log(result);
  });
  //-> Force an asynchronous functions to wait for another in order to complete a task.

bucket
******
Bucket is the most basic and valuable function in all analysis. For more information about how bucket works, check this explanation about:ref:`buckets <ref_concepts_bucket>` You will need to use it always when you want to get, insert, update or delete variables on your bucket. The first step is to select your bucket by its ID. After that, you will be able to use child functions to manipulate your data.

| **Arguments**
| bucket("bucket_id")
| *\*bucket_id(String) You need to pass a bucket ID. Only one ID is possible.*
|
| **Returns**
| *(\*) Returns an object which you can use to do a CRUD (create, read, update and delete).*
|
| **Examples**

.. code-block:: javascript

  var my_bucket = bucket("5705af2ce0bf5a85196d1c97");

  //-> The first line declares the bucket that you will access by ID
  //-> The next line do a search for the variable "variable" inside that bucket

.query
======
The Query function allows you to do some special type of requests to your data bucket. It is possible, for example, to get the maximum or minimum value of a variable, and if you combine it with other functions like start_date and end_date, you can refine your request even more.

| **Arguments**
| bucket("variable").query("value").run([thisArg])
| *\*variable(String): Variable name you want to request*
| *\*value(string): the type of query requested. These are the options:*
|   **\*min**: *get the data with minimum value*
|   **\*max**: *get the data with maximum value*
|   **\*last_item**: *get the last data inserted in the variable, regardless of the value or location*
|   **\*last_value**: *get the last data with value, regardless of the location*
|   **\*last_location**: *get the last data with location, regardless of the value*
|   **\*count**: *get the total number of data inserted inside the variable*
|
| **Returns**
| *(Array) An array with the results from the request*
|
| **Examples**

.. code-block:: javascript

 my_bucket("variable").query("last_value").run(function(error, result) {
    console.log(result);
 });
 //->

.origin
=======
 Since you can have more than one device, or even a script analysis inserting values to a bucket, the *origin* function allows you to filter the results by the ID the inserted the variable.

 | **Arguments**
 | bucket_var("variable").origin("id").run([thisArg])
 | *\*id(String) the device or analysis ID*
 |
 | **Returns**
 | *(Array) An array with the values inserted (originated) only by the selected ID*
 |
 |
 | **Examples**

.. code-block:: javascript

 var my_bucket = bucket("15787a4s15s4d799as");
 my_bucket("color").origin("54ab3ee59a56af7a067b7b89").query("last_value").run(function(error, result) {
     console.log(result);
 });
 //->  [{"variable":"color","origin":"54ab3ee59a56af7a067b7b89","time":"2015-11-25T19:01:22.000Z","serie":1448132464126,"location":{"type":"Point","coordinates":[-78.822224,35.7469741]},"value":"blue","id":"5650bf843644b39f35a8e108"},


.serie
======
Sometimes you may need to get value of one variable filtering by its *serie* number.  Serie is used to group variables when necessary, as it helps to synchronize them. You can learn more about :ref: `serie here<concepts-serie>`.

| **Arguments**
| bucket_var("variable").serie("serie").run([thisArg])
| *\*serie(String) the specific serie to be searched*
|
| **Returns**
| *(Array) An Array with the data using the same serie number as requested*
|
|
| **Examples**

.. code-block:: javascript

  var my_bucket = bucket("15787a4s15s4d799as");
  my_bucket("color").serie("1448132464126").query("last_value").run(function(error, result) {
      console.log(result);
  });
  //->  [{"variable":"color","origin":"54ab3ee59a56af7a067b7b89","time":"2015-11-25T19:01:22.000Z","serie":1448132464126,"location":{"type":"Point","coordinates":[-78.822224,35.7469741]},"value":"blue","id":"5650bf843644b39f35a8e108"},


.value
======
It is possible to do a search in the variables by *value*. The result will come with the location, date and other data related to that value.

| **Arguments**
| bucket_var("variable").value("value").run([thisArg])
| *\*value(String/Integer) the value to be searched.*
|
| **Returns**
| *(Array) An Array with the corresponded times which this value was inserted in bucket. You can use **.query("last_value")** to get the last one.
|
|
| **Examples**

.. code-block:: javascript

  var my_bucket = bucket("15787a4s15s4d799as");
  my_bucket("color").value("blue").query("last_value").run(function(error, result) {
      console.log(result);
  });
  //->  [{"variable":"color","origin":"54ab3ee59a56af7a067b7b89","time":"2015-11-25T19:01:22.000Z","serie":1448132464126,"location":{"type":"Point","coordinates":[-78.822224,35.7469741]},"value":"blue","id":"5650bf843644b39f35a8e108"}]

.qty
=====
Limit the number of results that will be returned from a query. The default value is 15.

| **Arguments**
| bucket_var("variable").qty(value).run([thisArg])
| *\*value(Integer) Maximum number of results to returned*
|
| **Returns**
| *(\*) Return no more than 'qty' results (data) **
|
| **Examples**

.. code-block:: javascript

  var my_bucket = bucket("15787a4s15s4d799as");
  my_bucket("color").qty(3).run(function(error, result) {
      console.log(result);
  });
  //->  [{"variable":"color","origin":"54ab3ee59a56af7a067b7b89","time":"2015-11-25T19:01:22.000Z","serie":1448132464126,"location":{"type":"Point","coordinates":[-78.822224,35.7469741]},"value":"blue","id":"5650bf843644b39f35a8e108"},
  //->  {"variable":"color","origin":"54ab3ee59a56af7a067b7b89","time":"2015-11-25T18:47:18.000Z","serie":1448131620070,"location":{"type":"Point","coordinates":[-78.761717,35.7722995]},"value":"red","id":"5650bc3758f890b23427c976"},
  //->  {"variable":"color","origin":"54ab3ee59a56af7a067b7b89","time":"2015-11-24T18:25:43.000Z","serie":1448130323366,"location":{"type":"Point","coordinates":[-78.7617483,35.772326]},"value":"blue","id":"5650b72658f890b23427c87b"}(...)]

.start_date
============
Define the start time for the data search. Only the data containing 'time' information newer than start_date will be returned. You can combine this function with end_date to create a period. You can add others types of argument, like a moment.js, a Date, a string formatted date, or even a string date like "1 day", "2 years".

| **Arguments**
| bucket_var("variable").start_date("value").run([thisArg])
| *\*value(String/Date) Pass a string date / moment.js Date.*
|
| **Examples**

.. code-block:: javascript

  var my_bucket = bucket("15787a4s15s4d799as");
  my_bucket("color").start_date("2 day").query("last_value").run(function(error, result) {
      console.log(result);
  });
  //->  [{"variable":"color","origin":"54ab3ee59a56af7a067b7b89","time":"2015-11-25T18:25:43.000Z","serie":1448130323366,"location":{"type":"Point","coordinates":[-78.7617483,35.772326]},"value":"blue","id":"5650b72658f890b23427c87b"},
  //->  {"variable":"color","origin":"54ab3ee59a56af7a067b7b89","time":"2015-11-25T17:01:45.000Z","serie":1448125287014,"location":{"type":"Point","coordinates":[-78.6379951,35.7788033]},"value":"yellow","id":"5650a37a58f890b23427c138"},
  //->  {"variable":"color","origin":"54ab3ee59a56af7a067b7b89","time":"2015-11-24T16:25:25.000Z","serie":1448123105311,"location":{"type":"Point","coordinates":[-78.8221858,35.7469293]},"value":"red","id":"56509af53644b39f35a8d54c"}]

.end_date
==========
Define the end time for the data search. Only the data containing 'time' information older than end_date will be returned. You can combine this function with start_date to create a period. You can add others types of argument, like a moment.js, a Date, a string formatted date, or even a string date like "yesterday", "1 day", "2 years".

| **Arguments**
| bucket_var("variable").end_date("value").run([thisArg])
| *\*value(String/Date) Pass a string date / moment.js Date.*
|
| **Examples**

.. code-block:: javascript

  var my_bucket = bucket("15787a4s15s4d799as");
  my_bucket("color").start_date("2 day").query("last_value").run(function(error, result) {
      console.log(result);
  });
  //->  [{"variable":"color","origin":"54ab3ee59a56af7a067b7b89","time":"2015-11-24T18:25:43.000Z","serie":1448130323366,"location":{"type":"Point","coordinates":[-78.7617483,35.772326]},"value":"blue","id":"5650b72658f890b23427c87b"},
  //->  {"variable":"color","origin":"54ab3ee59a56af7a067b7b89","time":"2015-11-24T17:01:45.000Z","serie":1448125287014,"location":{"type":"Point","coordinates":[-78.6379951,35.7788033]},"value":"yellow","id":"5650a37a58f890b23427c138"},
  //->  {"variable":"color","origin":"54ab3ee59a56af7a067b7b89","time":"2015-11-23T16:25:25.000Z","serie":1448123105311,"location":{"type":"Point","coordinates":[-78.8221858,35.7469293]},"value":"red","id":"56509af53644b39f35a8d54c"}]

.run
=====
Every time you query any data from a bucket, the *run* need to be included to start the request operation. This function is not useful when using *insert* or *clear*.

| **Arguments**
| bucket_var("variable").run([thisArg])
| *\*[thisArg](Function): The* `callback <https://developer.mozilla.org/en-US/docs/Mozilla/js-ctypes/Using_js-ctypes/Declaring_and_Using_Callbacks>`_ *function.*
|
| **Returns**
| *(\*) An error or the result of the iteration*
|
| **Examples**

.. code-block:: javascript

  var my_bucket = bucket("15787a4s15s4d799as");
  my_bucket("color").run(function(error, result) {
      console.log(result);
  });
  //->  [{"variable":"color","origin":"54ab3ee59a56af7a067b7b89","time":"2015-11-24T19:01:22.000Z","serie":1448132464126,"location":{"type":"Point","coordinates":[-78.822224,35.7469741]},"value":"blue","id":"5650bf843644b39f35a8e108"},
  //->  {"variable":"color","origin":"54ab3ee59a56af7a067b7b89","time":"2015-11-24T18:47:18.000Z","serie":1448131620070,"location":{"type":"Point","coordinates":[-78.761717,35.7722995]},"value":"red","id":"5650bc3758f890b23427c976"}(...)]

.insert
=======
Insert data into the bucket. Different from other functions of bucket, this function doesn't need the .run function to work.

| **Arguments**
| bucket_var("variable").insert(JSON, "origin_id", [thisArg])
| *(JSON): JSON data set with any combination of fields to be inserted. Some examples of field:*
|   **\*value**: *the value of the variable to be inserted;*
|   **\*serie**: *the serie of the variable. The serie will be randomly generated if not included. If an included serie already existed, the new one will be updated*
|   **\*unit**: *the unit of the variable*

.. code-block:: javascript

  {
      "value" : 33,
      "serie" :"1448132464126",
      "time"  :"2015-11-24T18:47:18.000Z",
      "unit"  :"C",
  }

| *origin_id(String): A String with ID of the origin. Default is the script analysis ID.*
| *[thisArg](Function): The* `callback <https://developer.mozilla.org/en-US/docs/Mozilla/js-ctypes/Using_js-ctypes/Declaring_and_Using_Callbacks>`_ *function.*
|
| **Returns**
| *(\*) An error and result of the iteration*
|
| **Examples**

.. code-block:: javascript

    var my_bucket    = bucket("15787a4s15s4d799as");
    var insert_model = {
        "value":"red"
    };
    var origin_id = "54ab3ee59a56af7a067b7b89";

    my_bucket("color").insert(insert_model, origin_id, function(error, result) {
        console.log(result);
    });
    //->  {"message":"1 Data Added, 0 Errors","added":[{"data":{"bucket":"54ab3ee59a56af7a067b7b8a","variable":"color","created_at":"2015-11-24T01:03:30.754Z","updated_at":"2015-11-24T01:03:30.754Z","origin":"54ab3ee59a56af7a067b7b89","origin_type":"custom","time":"2015-11-24T01:03:30.754Z","value":"red","id":"5653b76296cbc40f16222c90"}}],"errors":[]}

service
*******
Service function expands your analysis limits, allowing you to use external resources, like sms and email. To use it, you only need to declare the type of service you will use.

| **Arguments**
| service("value")
| *\*value(string): Value should be one of the available services:*
|   **\*devices**
|   **\*sms**
|   **\*email**
|   **\*account**:
|
| **Examples**

.. code-block:: javascript

 var devices = service("devices");
 var sms     = service("sms");
 var email   = service("email");
 var account = service("account");

devices
=======
When you need to obtain detailed information your the configuration of your devices, including the details of their operations, you can use *devices* service.

.list
-----
Get a list of all devices added in the user account.

| **Arguments**
| devices.list([thisArg])2
| *[thisArg](Function): The* `callback <https://developer.mozilla.org/en-US/docs/Mozilla/js-ctypes/Using_js-ctypes/Declaring_and_Using_Callbacks>`_ *function.*
|
| **Returns**
| *(\*) A list of all devices and their detailed information under the use account*
|
| **Examples**

.. code-block:: javascript

 var devices = service("devices");
 devices.list(function(error, result) {
    console.log(result);
 });
 //->[{"name":"Device_Config","description":null,"active":true,"visible":true,"bucket":{"id":"5605d8e2147c6f2837f82b90","name":"CB 20"}(...)}(...)]


.info
-----
Get detailed information about a specific device by using its ID. The information is the same as showed in the :ref:`Device\General information <ref_concepts_manag_device>`.

| **Arguments**
| devices.info("id", [thisArg])
| *id(String): A String with the ID of the origin. The default is the ID from the script analysis*
| *[thisArg](Function): The callback function*
|
| **Returns**
| *(JSON) Detailed information of the device*
|
| **Examples**

.. code-block:: javascript

 var devices = service("devices");
 devices.info("54ab3ee59a56af7a067b7b89", function(error, result) {
    console.log(result);
 });
 //->{"name":"Device_Config","description":null,"active":true,"visible":true,"created_at":"2015-10-15T21:46:37.871Z","updated_at":"2015-10-15T21:46:37.871Z","id":"56201ebd45674bf049a9f7a2","bucket":{"name":"Configuration","id":"55d2759e2425065b22f2d6b8"}}


.. _function_service_sms:

sms
===
You can configure the system to send sms directly from your analysis. Another option is to use the Actions to :ref:`send SMS <actions_send_sms>`.
Some costs may occur when using the SMS service, which varies based on the country of operation. Check pricing, terms of use, and your plan before using the SMS service.

.send
-----
Whenever you need to send a sms, use .send function.

| **Arguments**
| sms.send("cel_number", "message", [thisArg])
| *cel_number(String): A string with a phone number. If not sending to the USA, you have to add the country code, (+55) for Brazil, for example.*
| *message(String): Message of the sms. Use "\n" to break line.*
| *[thisArg](Function): The* `callback <https://developer.mozilla.org/en-US/docs/Mozilla/js-ctypes/Using_js-ctypes/Declaring_and_Using_Callbacks>`_ *function.*
|
| **Returns**
| *(\*) An error and the result of the request*
|
| **Examples**

.. code-block:: javascript

 var sms = service("sms");
 sms.send({'to': phone_number.value, 'message': message_to_send_backend.value}, function(error, result){
    console.log(result);
 });
 //-> Will return success or failure of the sms send.

.. _function_service_email:

email
=====
Email service allows you to send email through your analysis.

.send
-----
Whenever you need to send an email, use .send function.

| **Arguments**
| email.send(email_scope, [thisArg])
| *email_scope(JSON): All email items inside a JSON. You should use follow items:*
|   **\*to**: *Email which will receive the email;*
|   **\*from**: *Name of who send the email;*
|   **\*subject**: *Subject of the email;*
|   **\*message**: *Message of the email. Use "<br>" to break a line.;*
| *[thisArg](Function): The* `callback <https://developer.mozilla.org/en-US/docs/Mozilla/js-ctypes/Using_js-ctypes/Declaring_and_Using_Callbacks>`_ *function.*
|
| **Returns**
| *(\*) An error and result of the iteration*
|
| **Examples**

.. code-block:: javascript

 var email = service("email");
 var email_scope = {
    "to"     : "mary@gmail.com",
    "from"   : "Tago Report",
    "subject": "Time to refill the tank!",
    "message": "Good morning, Mary!<br> Time to fill the tank! Your car tank is almost empty, Shell gas station at Niles has the best price today."
 };
 email.send(email_scope, function(error, result){
    console.log(result);
 });
 //-> It will return success or failure of the email send.


.export
-----
Whenever you need to export a data as xml/json/csv by email, use .export

| **Arguments**
| email.export(model, email_scope, [thisArg])
|
| *model(JSON): Reference to the export, inside a json:*
|   **\*data**: *An Array of data, retrieve by bucket service;*
|   **\*output**: *Output format file, available are xml, csv and json;*
|   **\*filename**: *Name of the file (OPTIONAL);*
|   **\*simple(bool)**: *True/False. Format file with simple view or not. (OPTIONAL)*
|
| *email_scope(JSON): All email items inside a JSON. You should use follow items:*
|   **\*to**: *Email which will receive the email;*
|   **\*from**: *Name of who send the email;*
|   **\*subject**: *Subject of the email;*
|   **\*message**: *Message of the email. Use "<br>" to break a line.;*
| *[thisArg](Function): The* `callback <https://developer.mozilla.org/en-US/docs/Mozilla/js-ctypes/Using_js-ctypes/Declaring_and_Using_Callbacks>`_ *function.*
|
| **Returns**
| *(\*) An error and result of the iteration*
|
| **Examples**

.. code-block:: javascript
 var my_bucket = bucket("5705af2ce0bf5a85196d1c97")
 my_bucket("variable").query("last_value").run(function(error, data) {

  var email = service("email");
  var email_scope = {
   "to"     : "mary@gmail.com",
   "from"   : "Tago Report",
   "subject": "Time to refill the tank!",
   "message": "Good morning, Mary!<br> Time to fill the tank! Your car tank is almost empty, Shell gas station at Niles has the best price today."
  };

  var model = {
   "data"    : data,
   "output"  : "csv",
   "filename": "my-exported-csv",
   "simple"  : true
  }

  email.export(model, email_scope, function(error, result){
   console.log(result);
  });
 });
  //-> It will return success or failure of the email send.

*******************
Internal Variables
*******************

scope
*****
Every time an action triggers a script, the variable **scope** will be generated. This scope will bring all others variables generated at the same time by the same event. For example, if you submit a :ref:`form <widget-form>`, together with the variable that the script is reading, the scope will return a list of all values/variable input in that form. This allows you to manipulate in real time, and more easily, any new value inserted in your bucket.

| **Contents**
| *(Array): Always an array with all variables inserted in that moment*
|
| **Examples**

.. code-block:: javascript

  console.log(scope);
  //-> It will return ... [to-do]

##var##
*******
When using environment variables, which can be set in the :ref:`analysis_general_information` at analysis settings, you will be able to refer for that variable using "##" as prefix and suffix of the declared name.

| **Examples**

.. code-block:: javascript

  console.log(String("##bucket_id##"));
  //-> It will return the value of "bucket_id" environment variable;

  var other_var = Number("##bucket_id##");
  //-> "other_var" will receive "bucked_id" value;
