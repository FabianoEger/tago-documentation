.. _ref_api_api:

#########
API
#########

It is easy to connect electronic devices, data sources, and even third party APPs to your account using Tago API (Application Programming Interface).

We have a comprehensive set of APIs that give you full control to manage your accounts, data, devices, dashboards, and scripts. For example, you can use the resources available in the Admin page to create, delete, or edit your accounts and dashboards; however, you can do all the same things directly using API.

We follow RESTful principles. Before checking the API documentation, there are some details you should know.

All responses from Tago API have a pattern, and you will always receive something like this:


.. code-block:: javascript

	// For success:
	{
		'status': true,
		'result': [...]
	}

	// For warning:
	{
		'status': true,
		'result': {...},
		'message': 'Warning message'
	}

	// For failed:
	{
		'status': false,
		'message': 'Error message'
	}

**status**: it is always boolean. If your request is successful the response will be **true**, otherwise it will be **false**.

**result**: can be any object type (that is dynamic object), depends what api endpoint you called for.

**message**: it is message from the server. Usually it is used when has any error or warning.

Security
********

Tago takes the necessary steps to protect your data in the database and also during the communication between our server and your devices.

All communication between the devices, your application, and Tago server is performed through Hypertext Transfer Protocol Secure (HTTPS) to avoid the man-in-the-middle and wiretapping attacks.

Although the communication can also be performed with HTTP, Tago doesn’t recommend it. By doing so will eliminate the security of authentication and encryption provided by SSL/TLS protocols part of HTTPS.
Just in case you really need to use HTTP without SSL, all you have to do is to add ``_ssl=false`` on the header or url query string.

Secret tokens for account and devices are generated by Tago system and can be individually managed by the user. Different levels of access can be granted to different users or devices.

The URL that your device should connect is ``https://api.tago.io/data`` through  Port ``443``.

Tokens
******

There are two type of tokens: ``Account-Token`` and ``Device-Token``.

You are able to generate both tokens from Tago admin or directly using API. The type of token and its expiration can also be defined.

Using tokens is simple, just add them in the header of the request.

+----------------+-------------------------------+
| HEADER KEY     | HEADER VALUE                  |
+================+===============================+
| Account-Token  | Only Account Token            |
+----------------+-------------------------------+
| Device-Token   | Only Device Token             |
+----------------+-------------------------------+
| Authentication | Any Token (Account or Device) |
+----------------+-------------------------------+

Send Data
*********

A device can send data to Tago by using the POST method.

POST - ``https://api.tago.io/data``

+----------------------+----------------------+----------------------+
| KEY                  | TYPE                 | REQUIRED             |
+======================+======================+======================+
| variable             | string *             | yes                  |
+----------------------+----------------------+----------------------+
| unit                 | string               | no                   |
+----------------------+----------------------+----------------------+
| value                | string **            | no                   |
+----------------------+----------------------+----------------------+
| time                 | string               | no                   |
+----------------------+----------------------+----------------------+
| serie                | string               | no                   |
+----------------------+----------------------+----------------------+
| location             | object || geojson    | no                   |
+----------------------+----------------------+----------------------+

Request

.. code-block:: json

    {
        "variable": "temperature",
        "unit"    : "F",
        "value"   : 55,
        "time"    : "2015-11-03 13:44:33",
        "location": {"lat": 42.2974279, "lng": -85.628292}
    }

It's possible to send more than one data at same time, using an array.

.. code-block:: json

    [{
        "variable": "temperature",
        "unit"    : "F",
        "value"   : 55,
    }, {
        "variable": "temperature_celsius",
        "unit"    : "C",
        "value"   : 12,
    }]

(*) Variable field should no contain special characters like *?!<>.-=$ or space. Also, notice that the variable will always be converted to lowercase in our database.

(**) In order to make easier for users to see their data in charts and dials, Tago will always try to convert the *value* to a number format (integer), even if it came as string.
However, due to the range limitation, the automatic conversion will be done only for strings shorter than 15 characters. If a *value* originally is formed by a string longer than this length limitation, it will NOT be converted to a number.

Edit Data
*********

PUT - ``https://api.tago.io/data/:id``

- Each time you insert a data, an ID is associated with it. You can read this ID by using the GET method.

+----------------------+----------------------+----------------------+
| KEY                  | TYPE                 | REQUIRED             |
+======================+======================+======================+
| variable             | string               | no                   |
+----------------------+----------------------+----------------------+
| unit                 | string               | no                   |
+----------------------+----------------------+----------------------+
| value                | string               | no                   |
+----------------------+----------------------+----------------------+
| time                 | string               | no                   |
+----------------------+----------------------+----------------------+
| serie                | string               | no                   |
+----------------------+----------------------+----------------------+
| location             | object || geojson    | no                   |
+----------------------+----------------------+----------------------+

Request

.. code-block:: json

    {
        "unit" : "C"
    }

Delete Data
***********

DELETE - ``https://api.tago.io/data/:id``

DELETE - ``https://api.tago.io/data``

DELETE - ``https://api.tago.io/data/:variable_name``

- Each time you insert a data, an ID is associated with it. You can read this ID by using the GET method.

Delete method can be used in 3 forms: without argument, with variable, or with ID.  If no argument is specified at all, the most recent data inserted into your bucket will be removed.


Get Data
********

GET - ``https://api.tago.io/data``

+----------------------+----------------------+-------------------------------------------+
| KEY                  | TYPE                 | DESCRIPTION                               |
+======================+======================+===========================================+
| variable || s        | string || array      | Get variables                             |
+----------------------+----------------------+-------------------------------------------+
| query                | string               | Query pre-defined by Tago                 |
+----------------------+----------------------+-------------------------------------------+
| qty                  | string               | Maximum number of data to be returned     |
+----------------------+----------------------+-------------------------------------------+
| start_date           | string               | Start date                                |
+----------------------+----------------------+-------------------------------------------+
| end_date             | string               | End date                                  |
+----------------------+----------------------+-------------------------------------------+
| detail               | bool                 | Add more JSON fields on result            |
+----------------------+----------------------+-------------------------------------------+
.. | fields             | string || array      | Fields to be returned                     |
.. +----------------------+----------------------+-------------------------------------------+

Response - Below is the data returned without any parameters. ``https://api.tago.io/data``

.. code-block:: json

    {
        "status" : true,
        "result": [
            {
                "id": "547e42847dbf3af122c02582",
                "location": {
                    "coordinates": [
                        41.878876,
                        -87.635915
                    ],
                    "type": "Point"
                },
                "time": "2014-12-02T22:51:48.005Z",
                "variable": "location"
            }, {
                "id": "547e353d7dbf3af122c0257d",
                "time": "2014-12-02T21:55:09.301Z",
                "unit": "%",
                "value": "32",
                "variable": "fuel_level"
            },  {
                "id": "547e41f97dbf3af122c02580",
                "time": "2014-12-02T22:49:29.777Z",
                "unit": "psi",
                "value": "25",
                "variable": "oil_pressure"
            }
        ]
    }

Variables
=========

``variable`` - using parameter *variable* you define the variable that should be returned with the GET method.

For example, to get data with the variable = *temperature*, use: ``https://api.tago.io/data?variable=temperature``.

Also, you can use the array to get more variables: ``https://api.tago.io/data?variable[]=temperature&variable[]=pressure``

Query
=====

``query`` - query parameter returns some predefined functions to help you to obtain certain processed data. Note that you can not use two queries concurrently.


+---------------+------------------------------------------------------------------------------+
| QUERY         | DESCRIPTION                                                                  |
+===============+==============================================================================+
| max           | Get data with the highest value                                              |
+---------------+------------------------------------------------------------------------------+
| min           | Get data with the lowest value                                               |
+---------------+------------------------------------------------------------------------------+
| count         | Return the number of data located in the bucket                              |
+---------------+------------------------------------------------------------------------------+
| last_value    | Get the last data with field *value* not empty                               |
+---------------+------------------------------------------------------------------------------+
| last_location | Get the last data with field *location* not empty                            |
+---------------+------------------------------------------------------------------------------+
| last_item     | Get the last data, not checking if the fields *location* or *value* is empty |
+---------------+------------------------------------------------------------------------------+
| near *        | Get data near the specified geolocation                                      |
+---------------+------------------------------------------------------------------------------+


\*  Need additional parameters

near
----

The query ``near`` will return all data geographically located inside the radius of the location. ``near`` requires some extra parameters as listed below.

+---------------+---------------------------------------------------------------------------------------------------------------------------------+
| PARAMETER     | DESCRIPTION                                                                                                                     |
+===============+=================================================================================================================================+
| lat           | Latitude of the center point                                                                                                    |
+---------------+---------------------------------------------------------------------------------------------------------------------------------+
| lng           | Longitude of the center point                                                                                                   |
+---------------+---------------------------------------------------------------------------------------------------------------------------------+
| min_distance  | The minimum distance from the center point that the data is expected to be located. Specify the distance in meters (default 0)  |
+---------------+---------------------------------------------------------------------------------------------------------------------------------+
| max_distance  | The maximum distance from the center point that the data is expected to be located. Specify the distance in meters (default 500)|
+---------------+---------------------------------------------------------------------------------------------------------------------------------+


Quantity
========

``qty`` - Limit the number of results that will be returned from a query. The default value is 15.

.. Fields
.. ======
..
.. ``fields`` - Choose the JSON fields that will be included in the body response from Tago.
..
.. If *fields* is not used, the response will contain all default fields.

Start Date - End Date
=====================

``start_date`` - Define the start time for the data search. Only the data containing 'time' information newer than start_date will be returned.

``end_date`` - Define the end time for the data search. Only the data containing 'time' information older than end_date will be returned.

Start/End date parameters accept different formats, which include selection based on relative time (e.g. to get data from the last 1 hour). Below are some examples:

+--------------------------------------------+
| DATE FORMATS                               |
+============================================+
| "2014-12-25"                               |
+--------------------------------------------+
| "2014-12-25 23:33:22"                      |
+--------------------------------------------+
| "Thu Dec 25 2014 23:33:22 GMT+1300 (NZDT)" |
+--------------------------------------------+
| "1 hour"                                   |
+--------------------------------------------+
| "1 day"                                    |
+--------------------------------------------+
| "1 month"                                  |
+--------------------------------------------+
| "1 year"                                   |
+--------------------------------------------+

- Relative dates will be subtracted or added to the current time.
